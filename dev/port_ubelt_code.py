"""
Statically ports utilities from ubelt needed by mkinit.
"""


def autogen_mkint_utils():
    import ubelt as ub
    import liberator
    lib = liberator.Liberator()

    # Vendor in import utilities
    from ubelt import util_import
    lib.add_dynamic(util_import.split_modpath)
    lib.add_dynamic(util_import.modpath_to_modname)
    lib.add_dynamic(util_import.modname_to_modpath)

    lib.expand(["ubelt"])
    text = lib.current_sourcecode()
    print(text)

    import redbaron
    new_baron = redbaron.RedBaron(text)
    new_names = [n.name for n in new_baron.node_list if n.type in ["class", "def"]]

    import mkinit
    from mkinit import util  # NOQA
    from mkinit.util import util_import  # NOQA
    old_baron = redbaron.RedBaron(open(mkinit.util.util_import.__file__, "r").read())
    old_names = [n.name for n in old_baron.node_list if n.type in ["class", "def"]]
    set(old_names) - set(new_names)
    set(new_names) - set(old_names)

    prefix = ub.codeblock(
        '''
        """
        This file was autogenerated based on code in ubelt
        """
        '''
    )

    code = prefix + "\n" + text + "\n"
    print(code)

    if 1:
        fpath = ub.Path(ub.expandpath("~/code/mkinit/mkinit/util/util_import.py"))
        fpath.write_text(code)

    # Vendor in ordered set
    lib = liberator.Liberator()
    from ubelt import orderedset
    lib.add_dynamic(orderedset.OrderedSet)
    lib.expand(["ubelt"])
    text = lib.current_sourcecode()
    code = prefix + "\n" + text + "\n"
    print(code)
    fpath = ub.Path(ub.expandpath("~/code/mkinit/mkinit/util/orderedset.py"))
    fpath.write_text(code)
